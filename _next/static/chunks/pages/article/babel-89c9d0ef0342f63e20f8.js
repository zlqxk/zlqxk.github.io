(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[210],{8420:function(n,e,t){"use strict";t.d(e,{Z:function(){return h}});var r=t(6311),o=t(2472),s=t.n(o),i=t(9980),a=t.n(i),l=t(637),c=new(a())({highlight:function(n,e){var t=c.utils.escapeHtml(n);return e&&l.Z.getLanguage(e)&&(t=l.Z.highlight(e,n,!0).value),'<pre class="hljs"><code>'.concat(t,"</code></pre>")}}),p=c,u=t(2809),m=t(7294),b=t(3518),f=t.n(b),x=t(4184),d=t.n(x),g=t(5893),E=function(n){var e=n.visible,t=n.onClose,r=n.src;return(0,g.jsx)("div",{className:d()(f().imgPreview,(0,u.Z)({},f().visible,e)),onClick:t,children:(0,g.jsx)("img",{src:r})})},S=t(9008),h=(t(7460),function(n){var e=n.content,t=n.pageInfo,o=function(){var n=(0,m.useState)(!1),e=n[0],t=n[1],r=(0,m.useState)(""),o=r[0],s=r[1],i=(0,m.useRef)(null);return(0,m.useEffect)((function(){var n,e,r=null!==(n=null===(e=i.current)||void 0===e?void 0:e.getElementsByTagName("img"))&&void 0!==n?n:[];Array.from(r).forEach((function(n){n.onclick=function(n){n.target instanceof HTMLImageElement&&s(n.target.src),t(!0)}}))}),[]),[i,e,o,t]}(),i=(0,r.Z)(o,4),a=i[0],l=i[1],c=i[2],u=i[3];return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsxs)(S.default,{children:[(0,g.jsx)("title",{children:t.title}),(0,g.jsx)("meta",{name:"description",content:t.subtitle})]}),(0,g.jsx)(E,{visible:l,src:c,onClose:function(){return u(!1)}}),(0,g.jsx)("article",{ref:a,className:s().article,dangerouslySetInnerHTML:{__html:p.render(e)}})]})})},2426:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return s}});t(7294);var r=t(8420),o=t(5893),s=function(){return(0,o.jsx)(r.Z,{content:"# Babel \u6d45\u8c08\n\n11\u6708 01, 2021 \u2022 \u2615\ufe0f\u2615\ufe0f\u2615\ufe0f 30 min read\n\nBabel \u4f5c\u4e3a\u524d\u7aef\u5de5\u7a0b\u5316\u4f53\u7cfb\u4e2d\u4e0d\u53ef\u7f3a\u5c11\u7684\u4e00\u73af\uff0c\u201c\u5b58\u5728\u611f\u201d\u5374\u662f\u5f88\u4f4e\u7684\u3002\u5728\u5e73\u5e38\u7684\u4e1a\u52a1\u5f00\u53d1\u4e2d\uff0c\u5f80\u5f80\u4e0d\u4f1a\u88ab\u4eba\u76f4\u63a5\u7528\u5230\u3002\u5927\u90e8\u5206\u7684\u5f00\u53d1\u8005\u90fd\u53ef\u4ee5\u51c6\u786e\u7684\u8bf4\u51fa Babel \u7684\u4f5c\u7528\uff0c\u4ee5\u53ca\u4ed6\u7684\u5de5\u4f5c\u6d41\u7a0b\uff08parse -> transform -> generate\uff09\u3002\u4f46\u662f\u5177\u4f53\u6bcf\u4e2a\u73af\u8282\u90fd\u505a\u4e86\u54ea\u4e9b\u4e8b\u60c5\uff0c\u5b9e\u73b0\u7684\u539f\u7406\u53ef\u80fd\u5c31\u6ca1\u529e\u6cd5\u5f88\u6e05\u695a\u8bb2\u51fa\u6765\uff0c\u4eca\u5929\u6211\u4eec\u5c31\u7531\u6d45\u5165\u6df1\u7684\u8bb2\u89e3\u4e00\u4e0b Babel \u5230\u5e95\u662f\u600e\u6837\u5077\u5077\u7684\u201c\u6539\u53d8\u201d\u7684\u4f60\u7684\u4ee3\u7801\u3002\n\n\u9996\u5148\u6211\u4eec\u8981\u77e5\u9053\uff0cBabel \u662f\u4e00\u4e2a JavaScript \u7f16\u8bd1\u5668\uff0c\u66f4\u786e\u5207\u5730\u8bf4\u662f\u6e90\u7801\u5230\u6e90\u7801\u7684\u8f6c\u8bd1\u5668\uff0c\u4e3b\u8981\u7528\u4e8e\u5728\u5f53\u524d\u548c\u65e7\u6d4f\u89c8\u5668\u73af\u5883\u4e2d\u5c06 ECMAScript 2015+ \u4ee3\u7801\u8f6c\u6362\u4e3a\u5411\u540e\u517c\u5bb9\u7684 JavaScript \u7248\u672c\u3002\u4ee5\u4e0b\u662f Babel \u53ef\u4ee5\u4e3a\u4f60\u505a\u7684\u4e3b\u8981\u4e8b\u60c5\uff1a\n\n- \u8f6c\u6362\u8bed\u6cd5\n- \u5bf9\u76ee\u6807\u73af\u5883\u4e2d\u7f3a\u5c11\u7684\u80fd\u529b\u63d0\u4f9b Polyfill \u529f\u80fd\n- \u6e90\u4ee3\u7801\u8f6c\u6362\n\n\u4f8b\u5982\u4ee5\u4e0b\u4ee3\u7801\u6240\u793a\uff1a\n\n```tsx\n// Babel Input: ES2015 arrow function\nconst res = [1, 2, 3].map((n) => n + 1)\n\n// Babel Output: ES5 equivalent\nvar res = [1, 2, 3].map(function (n) {\n  return n + 1\n})\n```\n\n\u7b80\u5355\u7684\u6765\u8bf4\uff0cBabel \u5c31\u662f\u5148\u5c06\u4f60\u7684\u6e90\u4ee3\u7801 parse \u6210 AST\uff0c\u7136\u540e\u5bf9 AST \u8fdb\u884c\u4e00\u5b9a\u89c4\u5219\u7684\u4fee\u6539\u751f\u6210\u65b0\u7684 AST\uff0c\u6700\u540e\u6839\u636e\u65b0\u7684 AST \u751f\u6210\u8f6c\u8bd1\u540e\u7684\u4ee3\u7801\u3002\u90a3\u6211\u4eec\u5148\u6765\u8bb2\u4e00\u4e0b\u4ec0\u4e48\u662f AST\uff0c\u4ee5\u53ca AST \u4e2d\u4e00\u4e9b\u5e38\u89c1\u7684\u8282\u70b9\u7c7b\u578b\u3002\n\n\u9996\u5148 AST \u4e5f\u53eb\u62bd\u8c61\u8bed\u6cd5\u6811\uff0c\u4ed6\u662f\u5bf9\u6e90\u4ee3\u7801\u7684\u62bd\u8c61\u7684\u6811\u72b6\u8868\u793a\u3002\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u8868\u793a\u6e90\u4ee3\u7801\u4e2d\u51fa\u73b0\u7684\u7ed3\u6784\u3002\u4e4b\u6240\u4ee5\u88ab\u79f0\u4e3a\u62bd\u8c61\uff0c\u662f\u56e0\u4e3a\u5b83\u5e76\u4e0d\u4f1a\u4ee3\u8868\u771f\u5b9e\u4ee3\u7801\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u7ec6\u8282\uff0c\u4f8b\u5982 {} \u8fd9\u79cd\uff0c\u4ed6\u7684\u7ed3\u6784\u672c\u8eab\u5c31\u53ef\u4ee5\u88ab\u6811\u72b6\u7ed3\u6784\u6240\u8868\u793a\u3002\u90a3 Babel AST \u90fd\u6709\u54ea\u4e9b\u5e38\u89c1\u7684\u8282\u70b9\u7c7b\u578b\u5462\u3002\n\n> \u6211\u4eec\u53ef\u4ee5\u501f\u52a9 [astexplorer](https://astexplorer.net/) \u6765\u66f4\u6e05\u6670\u7684\u89c2\u5bdf AST\n\n- **Literal**\n\nLiteral \u662f\u5b57\u9762\u91cf\u7684\u610f\u601d\uff0c\u4f8b\u5982\u6211\u58f0\u660e\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u90a3\u4ed6\u7684\u7c7b\u578b\u5c31\u662f StringLiteral\u3002\n\n![StringLiteral](/front-end-compilation/StringLiteral.jpg)\n\n\u5982\u679c\u6211\u58f0\u660e\u7684\u662f\u4e00\u4e2a number\uff0c\u90a3\u4ed6\u7684\u7c7b\u578b\u5c31\u662f NumericLiteral\u3002\n\n![NumericLiteral](/front-end-compilation/NumericLiteral.jpg)\n\n- **Identifier**\n\nIdentifier \u6307\u7684\u5c31\u662f js \u4e2d\u7684\u53d8\u91cf\uff0c\u4f8b\u5982\u53d8\u91cf\u540d\uff0c\u51fd\u6570\u540d\u8fd9\u4e9b\u90fd\u662f Identifier\u3002\n\n![Identifier](/front-end-compilation/Identifier.jpg)\n\n- **Statement**\n\nStatement \u6307\u7684\u662f\u8bed\u53e5\uff0c\u6bd4\u5982\u6211\u4eec\u5199\u7684 if \u8bed\u53e5\uff0cfor \u8bed\u53e5\uff0cwhile \u8bed\u53e5\u7b49\u3002\n\n![IfStatement](/front-end-compilation/IfStatement.jpg)\n\n![WhileStatement](/front-end-compilation/WhileStatement.jpg)\n\n- **Expression**\n\nExpression \u662f\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982\u8d4b\u503c\u8868\u8fbe\u5f0f\uff0c\u6bd4\u8f83\u8868\u8fbe\u5f0f\u7b49\n\n![BinaryExpression](/front-end-compilation/BinaryExpression.jpg)\n\nBabel parse \u7684 AST \u8fd8\u6709\u5f88\u591a\u8282\u70b9\u7c7b\u578b\uff0c\u60f3\u8be6\u7ec6\u4e86\u89e3\u53ef\u4ee5\u901a\u8fc7\u67e5\u9605[\u6587\u6863](https://babeljs.io/docs/en/babel-types)\u3002\n\n\u5728\u4e86\u89e3\u4e86\u4ec0\u4e48\u662f AST\uff0c\u4ee5\u53ca Babel \u7684 AST \u6709\u54ea\u4e9b\u5e38\u89c1\u7684\u8282\u70b9\u7c7b\u578b\u4ee5\u540e\uff0c\u6211\u4eec\u518d\u6765\u770b\u4e0b\u7a76\u7adf\u662f Babel \u4e2d\u7684\u54ea\u4e2a\u6a21\u5757\u6765\u5e2e\u4f60\u5b9e\u73b0\u4e86\u7531\u6e90\u7801\u5230 AST \u7684\u8f6c\u6362\u3002\n\n@babel/parser\uff0c\u4e4b\u524d\u4e5f\u88ab\u79f0\u4f5c Babylon\uff0c\u4ed6\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u5c06\u6e90\u4ee3\u7801\u8f6c\u6362\u4e3a AST\u3002\u5e76\u4e14\u652f\u6301\u4ee5\u4e0b\u56db\u79cd\u80fd\u529b\u3002\n\n- \u9ed8\u8ba4\u542f\u7528\u6700\u65b0\u7684 ECMAScript \u7248\u672c\uff08ES2020\uff09\u3002\n- \u6ce8\u91ca\u3002\n- \u652f\u6301 JSX\u3001Flow\u3001Typescript\u3002\n- \u652f\u6301\u5b9e\u9a8c\u6027\u8bed\u8a00\u63d0\u6848\uff08\u63a5\u53d7\u4efb\u4f55\u81f3\u5c11 stage-0 \u7684 PR \uff09\u3002\n\n@babel/parser \u662f\u57fa\u4e8e acorn \u7684\u6269\u5c55\uff0c\u90a3\u4ec0\u4e48\u53c8\u662f acorn \uff1f\u8bf4\u5230\u8fd9\u91cc\u6211\u4eec\u5c31\u8981\u518d\u8d58\u8ff0\u4e00\u4e0b AST \u7684\u53d1\u5c55\u53f2\u3002\u6700\u65e9\u7684 AST \u662f\u7531 SpiderMonkey \u5f00\u6e90\u7684 estree \u6807\u51c6\uff0c\u7136\u540e\u57fa\u4e8e estree \u53c8\u884d\u751f\u51fa\u4e86 esprima \u548c acorn \u4e24\u79cd\uff0c\u7531\u4e8e acorn \u7684\u53ef\u6269\u5c55\u6027\uff0c\u540e\u7eed Eslint\uff08espree\uff09 \u7684 parse \u548c Babel\uff08Babel parse\uff09 \u7684 parse \u90fd\u9009\u62e9\u4e86\u57fa\u4e8e acorn \u6765\u8fdb\u884c\u6269\u5c55\uff0c\u800c typescript \u548c webpack \u7684 parse \u5219\u662f\u53e6\u5916\u4e00\u5957\u6807\u51c6\u3002\n\n![ASTHistory](/front-end-compilation/ASTHistory.jpeg)\n\n@babel/parser \u7684 \u4f7f\u7528\u5982\u4e0b\u6240\u793a\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8981\u8f6c\u4e49\u7684\u6e90\u4ee3\u7801\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f options\uff0c\u652f\u6301\u4f20\u5165\u4e00\u4e9b\u63d2\u4ef6\uff0c\u4f8b\u5982\u53ef\u4ee5\u4f7f\u7528\u89e3\u6790 jsx \u548c flow \u7684\u63d2\u4ef6\u3002\n\n```js\nrequire('@babel/parser').parse('code', {\n  // parse in strict mode and allow module declarations\n  sourceType: 'module',\n\n  plugins: [\n    // enable jsx and flow syntax\n    'jsx',\n    'flow',\n  ],\n})\n```\n\n\u5728 @babel/parser \u751f\u6210 AST \u4ee5\u540e\uff0c\u5c31\u9700\u8981\u53e6\u4e00\u4e2a\u6a21\u5757\u6765\u5bf9 AST \u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u4e2a\u6a21\u5757\u5c31\u662f @babel/traverse\u3002\n\n@babel/traverse \u63d0\u4f9b\u4e86 visitor \u51fd\u6570\u5bf9\u904d\u5386\u5230\u7684 AST \u8fdb\u884c\u5904\u7406\uff08\u5bf9 AST \u7684\u904d\u5386\u662f\u6df1\u5ea6\u4f18\u5148\uff09\uff0cvisitor \u63d0\u4f9b\u4e86 path \u7684 api \u6765\u5bf9 AST \u8282\u70b9\u8fdb\u884c\u7b5b\u9009\u548c\u64cd\u4f5c\u3002\u5728 traverse \u7684\u65f6\u5019\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u901a\u8fc7\u53e6\u4e00\u4e2a\u6a21\u5757 @babel/types\uff0c\u6765\u68c0\u67e5\u548c\u6784\u5efa AST\u3002\n\n\u6700\u540e\u6211\u4eec\u53ef\u4ee5\u518d\u901a\u8fc7 @babel/generator \u6a21\u5757\u5c06 AST \u8f93\u51fa\u4e3a\u8f6c\u6362\u540e\u7684\u6e90\u4ee3\u7801\uff0c\u6574\u4e2a\u64cd\u4f5c\u6211\u4eec\u53ef\u4ee5\u7528\u4ee5\u4e0b\u4ee3\u7801\u8868\u793a\u3002\n\n```js\nconst parser = require('@babel/parser')\nconst traverse = require('@babel/traverse').default\nconst types = require('@babel/types')\nconst generator = require('@babel/generator').default\n\n/**\n * \u5b9a\u4e49\u6211\u4eec\u7684\u6e90\u4ee3\u7801\n * */\nconst sourceCode = `var a = 1`\n\n/**\n * \u901a\u8fc7 parse \u6a21\u5757\u6765\u751f\u6210 ast \u8bed\u6cd5\u6811\n */\nconst ast = parser.parse(sourceCode)\n\n/**\n * \u901a\u8fc7 traverse \u6a21\u5757\u6765\u5bf9 ast \u8fdb\u884c\u904d\u5386\u548c\u4fee\u6539\n */\ntraverse(ast, {\n  // \u5bf9 VariableDeclarator \u7c7b\u578b\u7684 AST \u8fdb\u884c\u5904\u7406\n  VariableDeclarator(path) {\n    // \u5224\u65ad\u8868\u8fbe\u5f0f\u53f3\u4fa7\u7684\u8282\u70b9\u662f\u5426\u662f NumericLiteral \u7c7b\u578b\uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c06\u5176\u52a01\n    if (types.isNumericLiteral(path.node.init)) {\n      path.node.init.value = path.node.init.value + 1\n    }\n  },\n})\n\nconst { code } = generator(ast)\nconsole.log('code: ', code) // var a = 2\n```\n\n\u9664\u4e86\u8fd9\u51e0\u4e2a\u6838\u5fc3\u7684\u6a21\u5757\u3002Babel \u8fd8\u63d0\u4f9b\u4e86 @babel/code-frame \uff08\u7528\u4e8e\u8f93\u51fa\u9519\u8bef\u8b66\u544a\uff09\uff0c@babel/template \uff08\u7528\u4e8e\u6279\u91cf\u521b\u5efa AST\uff09\uff0c@babel/core \uff08\u5bf9\u4ee5\u4e0a\u51e0\u4e2a\u6a21\u5757\u7684\u805a\u5408\uff09\u3002\n\n\u6709\u4e86\u4ee5\u4e0a\u7684\u4e86\u89e3\u4ee5\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u5f00\u53d1\u4e00\u4e2a Babel \u7684\u63d2\u4ef6\u3002\u9996\u5148\u6211\u4eec\u5148\u6765\u5b9e\u73b0\u4e00\u4e2a\u8001\u751f\u5e38\u8c08\u7684\u4f8b\u5b50\uff0c\u5728\u8c03\u7528 console \u7684\u5730\u65b9\uff0c\u6253\u5370\u5176\u884c\u5217\u4fe1\u606f\u3002\n\n```js\n// \u8f93\u5165\nconsole.log(1)\n\nfunction foo() {\n  console.log('foo')\n}\n\n// \u8f93\u51fa\nconsole.log(`line:1, column:1`, 1)\n\nfunction foo() {\n  console.log(`line:4, column:2`, 'foo')\n}\n```\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u5148\u901a\u8fc7 [astexplorer](https://astexplorer.net/) \u6765\u89c2\u5bdf\u6211\u4eec\u8f93\u5165\u7684\u6e90\u7801\u7684 AST \u8bed\u6cd5\u6811\n\n![ques1](/front-end-compilation/ques1.jpg)\n\n\u5728\u89c2\u5bdf\u4ee5\u540e\uff0c\u6211\u4eec\u5f00\u59cb\u5b9e\u73b0\u4e00\u4e0b\u3002\u9996\u5148\u5f15\u5165\u6211\u4eec\u9700\u8981\u7684\u6a21\u5757\u3002\n\n```js\nconst sourceCode = `\n  console.log(1)\n\n  function foo() {\n    console.log('foo')\n  }\n`\n\nconst parser = require('@babel/parser')\nconst traverse = require('@babel/traverse').default\nconst types = require('@babel/types')\nconst generator = require('@babel/generator').default\n```\n\n\u7136\u540e\u5c06\u6211\u4eec\u8f93\u5165\u7684\u6e90\u7801\u8f6c\u6362\u4e3a AST\n\n```js\nconst sourceCode = `\n  console.log(1)\n\n  function foo() {\n    console.log('foo')\n  }\n`\n\nconst parser = require('@babel/parser')\nconst traverse = require('@babel/traverse').default\nconst types = require('@babel/types')\nconst generator = require('@babel/generator').default\n\nconst ast = parser.parse(sourceCode)\n```\n\n\u6838\u5fc3\u90e8\u5206\u6765\u4e86\uff0c\u63a5\u4e0b\u6765\u5bf9 AST \u8fdb\u884c\u5904\u7406\n\n```js\nconst sourceCode = `\n  console.log(1)\n\n  function foo() {\n    console.log('foo')\n  }\n`\n\nconst parser = require('@babel/parser')\nconst traverse = require('@babel/traverse').default\nconst types = require('@babel/types')\nconst generator = require('@babel/generator').default\n\nconst ast = parser.parse(sourceCode)\n\ntraverse(ast, {\n  // console.log \u5c5e\u4e8e CallExpression \u7c7b\u578b\n  CallExpression(path) {\n    /**\n     * \u9996\u5148\u5224\u65ad path.node.callee \u662f\u4e0d\u662f MemberExpression\n     * \u7136\u540e\u5224\u65ad\u662f\u5426\u662fconsole\u6253\u5934\uff0c\"log\", \"info\", \"error\" \u7ed3\u5c3e\n     * \u7b26\u5408\u8fd9\u4e9b\u6761\u4ef6\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9()\u91cc\u7684\u5185\u5bb9\u8fdb\u884c\u4fee\u6539\n     */\n    if (\n      types.isMemberExpression(path.node.callee) &&\n      path.node.callee.object.name === 'console' &&\n      ['log', 'info', 'error'].includes(path.node.callee.property.name)\n    ) {\n      const { line, column } = path.node.loc.start\n      path.node.arguments.unshift(\n        /**\n         * https://babeljs.io/docs/en/babel-types\n         * \u901a\u8fc7\u8c03\u7528 types \u7684 stringLiteral api \u6765\u521b\u5efa\u4e00\u4e2a stringLiteral \u7c7b\u578b\u7684 ast\n         * */\n        types.stringLiteral(`line:${line}, column:${column}`)\n      )\n    }\n  },\n})\n\nconst { code } = generator(ast)\nconsole.log(code)\n```\n\n\u6700\u540e\u67e5\u770b\u63a7\u5236\u53f0\u6570\u636e\u7ed3\u679c\uff0c\u5df2\u7ecf\u8fbe\u5230\u6211\u4eec\u9884\u671f\u7684\u8f93\u51fa\n\n```js\nconsole.log('line:2, column:0}', 1)\n\nfunction foo() {\n  console.log('line:5, column:2}', 'foo')\n}\n```\n\n\u7136\u540e\u6211\u4eec\u53ea\u9700\u8981\u5c06\u4e0a\u8ff0\u7684\u5b9e\u4f8b\u6539\u5199\u4e3a\u7b26\u5408 Babel \u63d2\u4ef6\u683c\u5f0f\u7684\u8bed\u6cd5\u5373\u53ef\uff0c\u9996\u5148\u4ecb\u7ecd\u4e0b Babel \u63d2\u4ef6\u7684\u683c\u5f0f\uff0cBabel \u63d2\u4ef6\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u51fd\u6570\u7684\u53c2\u6570\u5c31\u662f types \u6a21\u5757\uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u8c61\u4e2d\u7684 visitor \u5c5e\u6027\u5c31\u662f traverse \u7684 visitor \u65b9\u6cd5\u3002\n\n```js\nmodule.export = function ({ types }) {\n  return {\n    visitor: {//...},\n  }\n}\n```\n\n\u5c06\u6211\u4eec\u4e0a\u8ff0\u7684\u5199\u6cd5\u6539\u4e3a Babel \u63d2\u4ef6\u7684\u5199\u6cd5\uff0c\u6700\u7ec8\u7684\u6548\u679c\u5c31\u662f\uff1a\n\n```js\nmodule.export = function ({ types }) {\n  return {\n    visitor: {\n      CallExpression(path) {\n        if (\n          types.isMemberExpression(path.node.callee) &&\n          path.node.callee.object.name === 'console' &&\n          ['log', 'info', 'error'].includes(path.node.callee.property.name)\n        ) {\n          const { line, column } = path.node.loc.start\n          path.node.arguments.unshift(types.stringLiteral(`line:${line}, column:${column}`))\n        }\n      },\n    },\n  }\n}\n```\n\n\u6700\u540e\u6211\u4eec\u7528[astexplorer](https://astexplorer.net/)\u6765\u9a8c\u8bc1\u4e0b\u3002\n\n![ques1ans](/front-end-compilation/ques1ans.jpg)\n\n\u5728\u9a8c\u8bc1\u6ca1\u6709\u95ee\u9898\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u63d2\u4ef6\u53d1\u5305\uff0c\u7136\u540e\u5728\u9879\u76ee\u91cc\u901a\u8fc7 Bable plugin \u7684\u5f62\u5f0f\u5f15\u7528\u3002\u6216\u8005\u76f4\u63a5\u5c06\u63d2\u4ef6\u5378\u8f7d\u9879\u76ee\u91cc\uff0c\u7136\u540e\u901a\u8fc7\u76f8\u5bf9\u8def\u5f84\u7684\u5f62\u5f0f\u5f15\u7528\u4e5f\u662f\u53ef\u4ee5\u7684\u3002\n\n\u5728\u5b9e\u73b0\u4e86\u4e0a\u8ff0\u4e00\u4e2a\u7b80\u5355\u7684\u5c0f\u4f8b\u5b50\u540e\uff0c\u6211\u4eec\u518d\u6765\u5b9e\u73b0\u4e00\u4e2a\u9a9a\u4e00\u70b9\u7684\u64cd\u4f5c\u3002\u5728 react \u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u4f1a\u9047\u5230\u6839\u636e\u4e00\u4e2a state \u6765\u52a8\u6001\u5c55\u793a\u4e00\u4e2a\u7ec4\u4ef6\u7684\u573a\u666f\u3002\n\n```tsx\nimport React, { FC, useState } from 'react'\n\nconst App: FC = (props) => {\n  const [visible, setVisible] = useState<Boolean>(false)\n\n  const handleClick = () => setVisible((prev) => !prev)\n\n  return (\n    <div>\n      {visible ? <CustomCom /> : null}\n      <button onClick={handleClick}>\u70b9\u51fb</button>\n    </div>\n  )\n}\n```\n\n\u800c\u5728 vue \u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u7528 v-if \u8fd9\u4e2a\u6761\u4ef6\u5c5e\u6027\u5373\u53ef\u5b9e\u73b0\u540c\u6837\u7684\u6548\u679c\uff0c\u90a3\u6211\u4eec\u53ef\u4e0d\u53ef\u4ee5\u5728 react \u4e2d\u4e5f\u662f\u7528\u7c7b\u4f3c\u7684\u5199\u6cd5\u5462\uff0c\u4f8b\u5982\u4e0a\u8ff0\u4f8b\u5b50\u53ef\u4ee5\u6539\u9020\u4e3a\uff1a\n\n```tsx\nimport React, { FC, useState } from 'react'\n\nconst App: FC = (props) => {\n  const [visible, setVisible] = useState<Boolean>(false)\n\n  const handleClick = () => setVisible((prev) => !prev)\n\n  return (\n    <div>\n      <CustomCom x-if={visible} />\n      <button onClick={handleClick}>\u70b9\u51fb</button>\n    </div>\n  )\n}\n```\n\n\u8fd9\u6837\u770b\u8d77\u6765\u662f\u4e0d\u662f\u66f4\u7b80\u6d01\u4e00\u70b9\u5462\uff0c\u8fd9\u4e2a\u65f6\u5019\u5176\u5b9e\u5c31\u53ef\u4ee5\u7528\u5230\u6211\u4eec\u521a\u521a\u8bb2\u8fc7\u7684 Babel \u63d2\u4ef6\u7684\u5f62\u5f0f\u6765\u5b9e\u73b0\uff0c\u5728 AST \u4e2d\u53d6\u51fa x-if \u7b49\u53f7\u53f3\u8fb9\u7684\u503c\uff0c\u7136\u540e\u62fc\u63a5\u56de\u6765\u539f\u672c xxx && xxx \u7684\u5199\u6cd5\u3002\n\n```js\nmodule.exports = function ({ types: t }) {\n  return {\n    visitor: {\n      // \u9996\u5148\u6211\u4eec\u8981\u5904\u7406\u7684\u8282\u70b9\u7c7b\u578b\u662f JSXElement\n      JSXElement(path) {\n        const { node } = path\n        // \u67e5\u770b\u5f00\u6807\u7b7e\u7684\u5c5e\u6027\u4e2d\u662f\u5426\u6709 x-if \u7684\u5c5e\u6027\n        const xIfAttr = node.openingElement.attributes.find((item) => {\n          return item.type === 'JSXAttribute' && item.name.name === 'x-if'\n        })\n        if (!xIfAttr) return\n        // \u5982\u679c\u6709\u7684\u8bdd\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5f00\u6807\u7b7e\uff0c\u7ee7\u627f\u4e4b\u524d\u6807\u7b7e\u7684\u9664x-if\u7684\u6240\u6709\u5c5e\u6027\n        const openElement = t.jSXOpeningElement(\n          node.openingElement.name,\n          node.openingElement.attributes.filter((item) => {\n            return item.name.name !== 'x-if'\n          }),\n          node.openingElement.selfClosing\n        )\n        // \u4f7f\u7528\u65b0\u5efa\u7684\u5f00\u6807\u7b7e + \u539f\u6709children + \u539f\u6709\u95ed\u6807\u7b7e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684JSXElement\n        const Element = t.JSXElement(openElement, node.closingElement, node.children)\n        // \u751f\u6210\u4e00\u4e2a\u4e09\u76ee\u8868\u8fbe\u5f0f\uff0c\u5224\u65ad\u6761\u4ef6\u5c31\u662f x-if \u7b49\u53f7\u53f3\u8fb9\u7684\u503c\n        const expression = t.conditionalExpression(\n          xIfAttr.value.expression,\n          Element,\n          t.nullLiteral()\n        )\n        path.replaceWith(expression)\n      },\n    },\n  }\n}\n```\n\n\u8ba9\u6211\u4eec\u6765\u9a8c\u8bc1\u4e00\u4e0b\uff1a\n\n![x-if](/front-end-compilation/x-if.jpg)\n\n\u8fd9\u4e0b\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 react \u4e2d\u6109\u5feb\u7684\u4f7f\u7528\u201c\u6a21\u677f\u8bed\u6cd5\u4e86\u201d \uff08\u624b\u52a8\u72d7\u5934\uff0c\u8981\u6295\u5165\u751f\u4ea7\u73af\u5883\u7684\u8bdd\u8fd8\u9700\u8981\u8003\u8651\u5f88\u591a case\uff09\u3002\u8fd9\u91cc\u6211\u4e4b\u524d\u6709\u53d1\u8fc7\u4e00\u4e2a [babel-plugin-x-if](https://www.npmjs.com/search?q=babel-plugin-x-if)\u7684 npm \u5305\uff0c\u611f\u5174\u8da3\u7684\u53ef\u4ee5\u62c9\u4e0b\u6765\u5728\u9879\u76ee\u91cc\u8bd5\u4e00\u4e0b\u54e6\u3002\n\n\u65e2\u7136\u6709\u4e86 x-if\uff0c\u90a3\u5fc5\u7136\u4e0d\u80fd\u5c11\u4e86 x-for\u3002\u7136\u6211\u4eec\u770b\u4e0b x-for \u7684\u5b9e\u73b0\u903b\u8f91\u3002\n\n```js\nmodule.exports = function ({ types: t }) {\n  return {\n    visitor: {\n      JSXElement(path) {\n        const { node } = path\n        const xForAttr = node.openingElement.attributes.find((item) => {\n          return item.type === 'JSXAttribute' && item.name.name === 'x-for'\n        })\n        if (!xForAttr) return\n        const xForExpression = xForAttr.value\n        const judgeArrayMemberExpression = t.MemberExpression(\n          t.identifier('Array'),\n          t.identifier('isArray')\n        )\n        const judgeArrayCallExpression = t.callExpression(judgeArrayMemberExpression, [\n          t.identifier(xForExpression.expression.right.name),\n        ])\n        const xForArrMethodMemberExpression = t.MemberExpression(\n          t.identifier(xForExpression.expression.right.name),\n          t.identifier('map')\n        )\n        const xForOpenElement = t.jSXOpeningElement(\n          node.openingElement.name,\n          node.openingElement.attributes.filter((item) => {\n            return item.name.name !== 'x-for'\n          })\n        )\n        const xForElement = t.JSXElement(xForOpenElement, node.closingElement, node.children, false)\n        const xForReturnStatement = t.ReturnStatement(xForElement)\n        // {}\n        const xForInBlockStatement = t.BlockStatement([xForReturnStatement])\n        // item => {\n        //   return <li key={item}>{item}</li>;\n        // }\n        // \u8981\u517c\u5bb9\uff08item\uff09=> \u548c \uff08item, index\uff09=> \u4e24\u79cd\u60c5\u51b5\n        const xForArrowFunctionExpression = t.arrowFunctionExpression(\n          xForExpression.expression.left.type === 'SequenceExpression'\n            ? xForExpression.expression.left.expressions\n            : [t.Identifier(xForExpression.expression.left.name)],\n          xForInBlockStatement\n        )\n        // arr.map(item => {\n        //   return <li key={item}>{item}</li>;\n        // })\n        const xForCallExpression = t.callExpression(xForArrMethodMemberExpression, [\n          xForArrowFunctionExpression,\n        ])\n        // Array.isArray(arr)\n        const xForLogicalExpression = t.LogicalExpression(\n          '&&',\n          judgeArrayCallExpression,\n          xForCallExpression\n        )\n        // Array.isArray(arr) && arr.map((item, index) => {\n        //   return <li key={index}>{item.label}</li>;\n        // });\n        const xForExpressionStatement = t.ExpressionStatement(xForLogicalExpression)\n        // {\n        //   Array.isArray(arr) && arr.map((item, index) => {\n        //     return <li key={index}>{item.label}</li>;\n        //   });\n        // }\n        const xForOutBlockStatement = t.blockStatement([xForExpressionStatement])\n        path.replaceWith(xForOutBlockStatement)\n      },\n    },\n  }\n}\n```\n\nx-for \u7684\u5b9e\u73b0\u4f1a\u76f8\u5bf9\u590d\u6742\u4e9b\uff0c\u4e14\u8003\u8651\u7684\u573a\u666f\u4f1a\u66f4\u591a\uff0c\u8fd9\u91cc\u4e5f\u53ea\u662f\u629b\u7816\u5f15\u7389\uff0c\u7ed9\u4e00\u4e2a\u57fa\u672c\u7684\u5b9e\u73b0\u601d\u8def\uff0c\u5177\u4f53\u5b9e\u73b0\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u5c1d\u8bd5\u4e00\u4e0b\u3002\u6309\u7167\u60ef\u4f8b\u6211\u4eec\u6d4b\u8bd5\u4e00\u4e0b\u3002\n\n![x-for](/front-end-compilation/x-for.jpg)\n\n\u57fa\u672c\u4e0a\u5b9e\u73b0\u4e86\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\uff0c\u540c\u6837\u8fd9\u4e2a\u6211\u4e5f\u6709\u53d1\u8fc7\u4e00\u4e2a [babel-plugin-x-for](https://www.npmjs.com/search?q=babel-plugin-x-for) \u7684\u5305\uff0c\u611f\u5174\u8da3\u4e5f\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u3002\n\n\u901a\u8fc7\u4ee5\u4e0a\u51e0\u4e2a\u4f8b\u5b50\uff0c\u5176\u5b9e\u6211\u4eec\u53ef\u4ee5\u53d1\u6563\u4e00\u4e0b\u601d\u8def\uff0c\u5728\u5e73\u65f6\u7684\u4e1a\u52a1\u5f00\u53d1\u4e2d\uff0c\u662f\u4e0d\u662f\u6709\u9760\u4e1a\u52a1\u5c42\u9762\u6bd4\u8f83\u96be\u5b9e\u73b0\uff0c\u4f46\u662f\u901a\u8fc7\u7f16\u8bd1\u7ef4\u5ea6\u8fdb\u884c\u964d\u7ef4\u6253\u51fb\u5374\u53ef\u4ee5\u7b80\u5355\u7684\u5b9e\u73b0\u5462\u3002\u4f8b\u5982\u81ea\u52a8\u5316\u57cb\u70b9\u3001\u81ea\u52a8\u751f\u6210 api \u6587\u6863\u4e4b\u7c7b\uff1f\u4f46\u8fd9\u4e9b\u90fd\u662f\u5efa\u7acb\u5728\u6211\u4eec\u5bf9\u5de5\u7a0b\u5316\u4f53\u7cfb\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u4e86\u89e3\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u60f3\u5230\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u53ea\u662f\u7b80\u5355\u7684\u4e86\u89e3\u4e86\u4e00\u4e0b Babel \u7684\u7528\u6cd5\u3002\u4f46\u662f\u5728\u6574\u4e2a\u524d\u7aef\u5de5\u7a0b\u5316\u4f53\u7cfb\u4e2d\uff0c\u6d89\u53ca\u5230\u7f16\u8bd1\u6280\u672f\u7684\u9664\u4e86 Babel\uff0c\u8fd8\u6709 eslint\uff0ctypescript \u7b49\u3002\u4ec5\u4ec5\u5bf9 Babel \u7684\u4f7f\u7528\u6709\u4e00\u4e9b\u4e86\u89e3\u662f\u8fdc\u8fdc\u4e0d\u591f\u7684\u3002\u4f46\u662f Babel \u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5207\u5165\u70b9\u3002\n\n#### \u53c2\u8003\n\n> https://babeljs.io/docs/en/\n\n> https://github.com/brigand/babel-plugin-handbook/blob/master/translations/zh-Hans/README.md\n\n> https://live.juejin.cn/4354/4815025\n",pageInfo:{title:"Babel \u6d45\u8c08",subtitle:"Babel \u6d45\u8c08"}})}},2495:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/article/babel",function(){return t(2426)}])},3518:function(n){n.exports={imgPreview:"ImgPreview_imgPreview__2OxIp",visible:"ImgPreview_visible__37B3E"}},2472:function(n){n.exports={article:"post_article__2Kkhj",anchor:"post_anchor__3OJU8",translation:"post_translation__2cS_6"}}},function(n){n.O(0,[800,774,888,179],(function(){return e=2495,n(n.s=e);var e}));var e=n.O();_N_E=e}]);